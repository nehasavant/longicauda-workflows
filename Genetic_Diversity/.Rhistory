install.packages("LandGenCourse")
install.packages(c("coefplot", "curl", "data.tree", "digest", "foreach", "irlba", "iterators", "knitr", "lme4", "MASS", "Matrix", "MBESS", "mgcv", "OpenMx", "Rcpp", "reshape2", "rlang", "rpart", "sp", "spData", "StanHeaders", "tibble", "viridis", "visNetwork", "xts", "yaml", "zoo"))
install.packages("LandGenCourse")
R.version
#Landscape Genetics
#Week 1
#Jan 17 2018
#Neha Savant
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("hwagner1/LandGenCourse")
devtools::install_github("hhwagner1/LandGenCourse")
libarary(LanGenCourse)
install.packages("devtools")
library(devtools)
devtools::install_github("hhwagner1/LandGenCourse")
libarary(LanGenCourse)
library(LanGenCourse)
library(hhwagner1/LanGenCourse)
library(LandGenCourse)
LandGenCourse:::startTutorialAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
devtools::install_github("leandroroser/EcoGenetics-devel")
library(EcoGenetics)
LandGenCourse:::chooseWEAddin()
LandGenCourse:::openCheatsheetAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
u
LandGenCourse:::chooseWEAddin()
## ----message=FALSE, warning=TRUE-----------------------------------------
require(adegenet)
require(gstudio)
require(LandGenCourse)
require(tibble)
## ------------------------------------------------------------------------
data(ralu.loci)
## ----out.width = "50%"---------------------------------------------------
knitr::include_graphics(system.file("extdata", "ExcelTable.png",
package = "LandGenCourse"))
## ------------------------------------------------------------------------
Frogs <- read.csv(system.file("extdata", "ralu.loci.csv",
package = "LandGenCourse"), header=TRUE)
## ------------------------------------------------------------------------
Frogs <- read.csv(system.file("extdata", "ralu.loci.csv",
package = "LandGenCourse"), header=TRUE)
Frogs <- read.csv(system.file("extdata", "ralu.loci.csv",
package = "LandGenCourse"), header=TRUE)
as.tibble(Frogs)
LandGenCourse:::chooseWEAddin()
#Installing an R kernel in Jupyter notebook
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
version
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
devtools::install_github("hhwagner1/LandGenCourse")
LandGenCourse:::chooseWEAddin()
devtools::install_github("leandroroser/EcoGenetics-devel")
devtools::install_github("hhwagner1/LandGenCourse")
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
LandGenCourse:::chooseWEAddin()
#load data from Wickecheoke stream salamanders
setwd("~/Dropbox/Columbia_New_York/Salamanders/Downstream_Analyses/piedmont_DAPC")
#DAPC with Piedmont samples only
install.packages("adegenet", dep=TRUE)
install.packages("adegenet", dep = TRUE)
library(poppr)
library(adegenet)
library(ade4)
#load data from Wickecheoke stream salamanders
setwd("~/Dropbox/Columbia_New_York/Salamanders/Downstream_Analyses/piedmont_DAPC")
setwd("~/Dropbox/Columbia_New_York/Salamanders/Downstream_Analyses/DAPC/piedmont_DAPC")
#set working directory session- set directory to Suburban sals- statistics DAPC
p1<-read.genepop("batch_1_Piedmont_noCOOK.gen")
p1
str(p1)
pop(p1) #For some reason it is reading the popuations wrong. OLD009, UPP022, UPP021 and WICK015 are the populations names. These are the names of the final samples in each pop...
p1clust<- find.clusters(p1, max.n.clust=40, n.pca=NULL) #finding clusters, first set to max PCs and retain lowest point of BIC
table(pop(p1), p1clust$grp)
table.value(table(pop(p1), p1clust$grp), col.lab=paste("inf", 1:14), row.lab=paste("ori", 1:14))
p1clust<- find.clusters(p1, max.n.clust=40, n.pca=NULL) #finding clusters, first set to max PCs and retain lowest point of BIC
#Run first dapc on b1clust
dapc.p1<- dapc (p1, b1clust$grp)
#Run first dapc on b1clust
dapc.p1<- dapc (p1, p1clust$grp)
#Running the DAPC
dapc.p2 <- dapc(p1, var.contrib = TRUE, scale = FALSE, n.pca = 40, n.da = NULL) #run the DAPC
#Figure out eigenvalue percent of variability in each discrimnant function
eig_percent <- round((dapc.p2$eig/(sum(dapc.p2$eig)))*100,2)
eig_percent
scatter(dapc.p2, cell = 0, pch = 18:23, cstar = 0, mstree = FALSE, lwd = 2, lty = 2) #run the scatter of the DAPC
#calculating the optimum PC number to rerun DAPC
optim.a.score(dapc.p2, n.pca=1:ncol(dapc.p2$tab), smart=TRUE, n=10, plot=TRUE, n.sim=10, n.da=6) #calculating optimal number of PCs
#rerun DAPC with optimum PCs=7
dapc.p3 <- dapc(p1, var.contrib= TRUE, scale = FALSE, n.pca = 7, n.da = 6) #change PCs to the optimal
dapc.p3.scatter<- scatter(dapc.p3, pch = 18:25, cstar = 0, mstree = FALSE, scree.da=TRUE, posi.da = "bottomleft", ratio.da= 0.179, cex=1.0, cex.lab=0.5, cex.main=0.5, cellipse=TRUE, legend=TRUE, posi.leg="topleft", ncol=2)
#sum stats of a scores for your DAPC
summary(dapc(p1, n.da=6, n.pca=7))$assign.per.pop #summary stats for your PC presenting a-scores
#proportion of variable explained by PC
eig_percent <- round((dapc.p3$eig/(sum(dapc.p3$eig)))*100,2)
# what are the percent variance explained by PC1 and PC2?
eig_percent[1:7]
piedmont=list("CAPO", "HAKI", "HARI", "LNIS", "LOCK", "WICK", "WARF")
#axes 1&2
scatter(dapc.p3, xax=1, yax=2, pch = 18:25, txt.leg = piedmont, label = piedmont, mstree = FALSE, scree.da=TRUE, posi.da = "bottomleft", ratio.da= 0.179, cex=1.0, cex.lab=0.5, cex.main=0.5, cellipse=TRUE, legend=TRUE, posi.leg="topright")
#axes 2&3
scatter(dapc.p3, xax=2, yax=3, pch = 18:25, txt.leg = piedmont, label = piedmont, mstree = FALSE, scree.da=TRUE, posi.da = "bottomright", ratio.da= 0.179, cex=1.0, cex.lab=0.5, cex.main=0.5, cellipse=TRUE, legend=TRUE, posi.leg="topleft")
gen<-read.genepop("batch_1_Piedmont.gen")
gen<-read.genepop("batch_1.gen")
setwd("~/Dropbox/Columbia_New_York/Salamanders/Downstream_Analyses/Genetic_Diversity")
gen<-read.genepop("batch_1.gen")
#### Hierstats genetic diveristy stats #####
install.packages("hierfstat")
install.packages("pegas")
install.packages("pegas")
library("adegenet")
library("hierfstat")
library("pegas")
mydata <- genind2hierfstat(gen)
div <- summary(mydata)
div
names.div
names(div)
div <- summary(gen)
div
div
names(div)
plot(div$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus")
plot(div$Hobs,div$Hexp, xlab="Hobs", ylab="Hexp",
main="Expected heterozygosity as a function of observed heterozygosity per locus")
bartlett.test(list(div$Hexp, div$Hobs)) # a test : H0: Hexp = Hobs
#These analyses give you basic statistics using hierfstat package. The function `basic.stats()` provides the observed heterozygosity (Ho), mean gene diversities within population (Hs, Fis, Fst). The function `boot.ppfis()` provides confidence interval for Fis. The function `indpca()` does a PCA on the centered matrix of indiviual's allele frequencies.
basicstat <- basic.stats(Mydata2, diploid = TRUE, digits = 2)
#These analyses give you basic statistics using hierfstat package. The function `basic.stats()` provides the observed heterozygosity (Ho), mean gene diversities within population (Hs, Fis, Fst). The function `boot.ppfis()` provides confidence interval for Fis. The function `indpca()` does a PCA on the centered matrix of indiviual's allele frequencies.
basicstat <- basic.stats(mydata, diploid = TRUE, digits = 2)
names(basicstat)
#The function `indpca()` does a PCA on the centered matrix of indiviual's allele frequencies.
x <- indpca(mydat2)
#The function `indpca()` does a PCA on the centered matrix of indiviual's allele frequencies.
x <- indpca(mydata)
basicstat
plot(x, cex = 0.7)
